import requests
import tkinter as tk
from tkinter import messagebox

# Function to check security headers
def check_security_headers(url):
    try:
        # Send a request to the website
        response = requests.get(url)
        
        # If a successful response is received, proceed
        if response.status_code == 200:
            headers = response.headers
            
            # List to hold security vulnerabilities
            security_vulnerabilities = []

            # XSS (Cross-Site Scripting) protection check
            if 'X-XSS-Protection' not in headers:
                security_vulnerabilities.append("X-XSS-Protection header is missing (XSS vulnerabilities)")
            elif not headers.get('X-XSS-Protection').startswith('1;'):
                security_vulnerabilities.append("X-XSS-Protection header is not properly configured (XSS vulnerabilities)")

            # Content-Type Sniffing protection check
            if 'X-Content-Type-Options' not in headers or headers.get('X-Content-Type-Options') != 'nosniff':
                security_vulnerabilities.append("X-Content-Type-Options header is missing or not set to 'nosniff' (Content-Type sniffing vulnerabilities)")

            # Content-Security-Policy (CSP) check
            if 'Content-Security-Policy' not in headers:
                security_vulnerabilities.append("Content-Security-Policy header is missing (Clickjacking vulnerabilities)")

            # Strict-Transport-Security (HSTS) check
            if 'Strict-Transport-Security' not in headers:
                security_vulnerabilities.append("Strict-Transport-Security header is missing (SSL/TLS vulnerabilities)")
            elif not headers.get('Strict-Transport-Security').startswith('max-age='):
                security_vulnerabilities.append("Strict-Transport-Security header is not properly configured (SSL/TLS vulnerabilities)")

            # Access-Control-Allow-Origin (CORS) check
            if 'Access-Control-Allow-Origin' not in headers:
                security_vulnerabilities.append("Access-Control-Allow-Origin header is missing (CORS vulnerabilities)")

            # Referrer-Policy check
            if 'Referrer-Policy' not in headers:
                security_vulnerabilities.append("Referrer-Policy header is missing (Referrer Policy vulnerabilities)")

            # Server header privacy check
            if 'Server' in headers:
                security_vulnerabilities.append("Server header is present (Server information leakage)")

            # HTTP Headers Uncommon Headers check
            uncommon_headers = ['X-Powered-By', 'X-AspNet-Version', 'X-AspNetMvc-Version']
            for header in uncommon_headers:
                if header in headers:
                    security_vulnerabilities.append(f"{header} header is present (Uncommon header)")

            # HTTP Public Key Pinning (HPKP) check
            if 'Public-Key-Pins' not in headers:
                security_vulnerabilities.append("Public-Key-Pins header is missing (HPKP vulnerabilities)")

            # Cross-Origin Resource Sharing (CORS) check
            if 'Access-Control-Allow-Origin' in headers and headers['Access-Control-Allow-Origin'] != '*' and headers['Access-Control-Allow-Origin'] != url:
                security_vulnerabilities.append("Access-Control-Allow-Origin is not properly configured (CORS vulnerabilities)")

            # HTTP Strict Transport Security (HSTS) Configuration check
            if 'Strict-Transport-Security' in headers and not headers['Strict-Transport-Security'].startswith('max-age='):
                security_vulnerabilities.append("Strict-Transport-Security header is not properly configured (HSTS vulnerabilities)")

            # Clickjacking Attacks check
            if 'X-Frame-Options' not in headers and 'Content-Security-Policy' not in headers:
                security_vulnerabilities.append("X-Frame-Options and Content-Security-Policy headers are missing (Clickjacking vulnerabilities)")

            # Return the vulnerabilities or success message
            if security_vulnerabilities:
                return "\n".join(security_vulnerabilities)
            else:
                return "No security vulnerabilities detected."
        else:
            return f"Failed to fetch {url}. Status code: {response.status_code}"

    except requests.exceptions.RequestException as e:
        return f"An error occurred: {e}"

# Creating the Tkinter window
def create_gui():
    # to the Initialize window
    window = tk.Tk()
    window.title("Web Security Header Checker")
    window.geometry("600x400")

    # Function to handle the button click and check URL
    def on_check_click():
        url = url_entry.get()
        if url:
            result = check_security_headers(url)
            result_text.delete(1.0, tk.END)  # Clear previous result
            result_text.insert(tk.END, result)  # Insert the new result

        else:
            messagebox.showerror("Input Error", "Please enter a URL to check.")

    # Creating input field for URL
    url_label = tk.Label(window, text="Enter URL:")
    url_label.pack(pady=10)
    url_entry = tk.Entry(window, width=50)
    url_entry.pack(pady=5)

    # Create button to check security headers
    check_button = tk.Button(window, text="Check Security Headers", command=on_check_click)
    check_button.pack(pady=20)

    # Creating a Text widget to display the result
    result_text = tk.Text(window, height=10, width=70)
    result_text.pack(pady=10)

    window.mainloop()

# Starting the Tkinter GUI
create_gui()
