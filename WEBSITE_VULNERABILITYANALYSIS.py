import requests                   #koda daha fazla ekleme yapılabilir ben bu kadarın yeterli olduğunu düşündüm istenildiği takdirde daha fazla zaafiyet elde edilebilir#
                                  #Bu kod, web sitelerinin güvenlik durumunu inceleyerek potansiyel açıkları tespit eder. İlk olarak, belirtilen URL'ye bir HTTP GET isteği gönderir ve alınan yanıtın durum kodunu kontrol eder. 
                                  #Eğer yanıt 200 ise, yani istek başarılı ise, HTTP başlıklarını inceler. Bazı önemli başlıkları kontrol eder ve bunların eksik veya yanlış yapılandırılmış olup olmadığını kontrol eder. Herhangi bir güvenlik açığı tespit edilirse, bunu bildirir.
                                  #birnevi dirbuster gibi çalışır Ancak, bu kod sadece HTTP başlıklarını kontrol ederken, bir dirbuster daha geniş kapsamlı bir tarama yapabilir ve sunucuda bulunan dosya ve dizinleri arayabilir.
def check_security_headers(url):
    try:
        # Send a request to the website
        response = requests.get(url)
        
        # If a successful response is received, proceed
        if response.status_code == 200:
            print(f"[*] Checking security headers for {url}:")
            headers = response.headers
            
            # List to hold security vulnerabilities
            security_vulnerabilities = []

            # XSS (Cross-Site Scripting) protection check
            if 'X-XSS-Protection' not in headers:
                security_vulnerabilities.append("X-XSS-Protection header is missing (XSS vulnerabilities)")
            elif not headers.get('X-XSS-Protection').startswith('1;'):
                security_vulnerabilities.append("X-XSS-Protection header is not properly configured (XSS vulnerabilities)")

            # Content-Type Sniffing protection check
            if 'X-Content-Type-Options' not in headers or headers.get('X-Content-Type-Options') != 'nosniff':
                security_vulnerabilities.append("X-Content-Type-Options header is missing or not set to 'nosniff' (Content-Type sniffing vulnerabilities)")

            # Content-Security-Policy (CSP) check
            if 'Content-Security-Policy' not in headers:
                security_vulnerabilities.append("Content-Security-Policy header is missing (Clickjacking vulnerabilities)")

            # Strict-Transport-Security (HSTS) check
            if 'Strict-Transport-Security' not in headers:
                security_vulnerabilities.append("Strict-Transport-Security header is missing (SSL/TLS vulnerabilities)")
            elif not headers.get('Strict-Transport-Security').startswith('max-age='):
                security_vulnerabilities.append("Strict-Transport-Security header is not properly configured (SSL/TLS vulnerabilities)")

            # Access-Control-Allow-Origin (CORS) check
            if 'Access-Control-Allow-Origin' not in headers:
                security_vulnerabilities.append("Access-Control-Allow-Origin header is missing (CORS vulnerabilities)")

            # Referrer-Policy check
            if 'Referrer-Policy' not in headers:
                security_vulnerabilities.append("Referrer-Policy header is missing (Referrer Policy vulnerabilities)")

            # Server header privacy check
            if 'Server' in headers:
                security_vulnerabilities.append("Server header is present (Server information leakage)")

            # HTTP Headers Uncommon Headers check
            uncommon_headers = ['X-Powered-By', 'X-AspNet-Version', 'X-AspNetMvc-Version']
            for header in uncommon_headers:
                if header in headers:
                    security_vulnerabilities.append(f"{header} header is present (Uncommon header)")

            # HTTP Public Key Pinning (HPKP) check
            if 'Public-Key-Pins' not in headers:
                security_vulnerabilities.append("Public-Key-Pins header is missing (HPKP vulnerabilities)")

            # Cross-Origin Resource Sharing (CORS) check
            if 'Access-Control-Allow-Origin' in headers and headers['Access-Control-Allow-Origin'] != '*' and headers['Access-Control-Allow-Origin'] != url:
                security_vulnerabilities.append("Access-Control-Allow-Origin is not properly configured (CORS vulnerabilities)")

            # HTTP Strict Transport Security (HSTS) Configuration check
            if 'Strict-Transport-Security' in headers and not headers['Strict-Transport-Security'].startswith('max-age='):
                security_vulnerabilities.append("Strict-Transport-Security header is not properly configured (HSTS vulnerabilities)")

            # Clickjacking Attacks check
            if 'X-Frame-Options' not in headers and 'Content-Security-Policy' not in headers:
                security_vulnerabilities.append("X-Frame-Options and Content-Security-Policy headers are missing (Clickjacking vulnerabilities)")

            # Print security vulnerabilities
            if security_vulnerabilities:
                print("Security vulnerabilities:")
                for vulnerability in security_vulnerabilities:
                    print(f"- {vulnerability}")
            else:
                print("No security vulnerabilities detected.")

        else:
            print(f"Failed to fetch {url}. Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")

# Example usage
website_url = input("Enter the URL of the website to check: ") #burada gireceğiniz url nin input kodu yer alıyor istendiği takdir user input formatı yerine manuel olarak kendimizde bu bilgiyi girebiliriz
check_security_headers(website_url)
